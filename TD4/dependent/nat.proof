define nat = fun (x : Nat) -> Nat
define fst = fun (n : Nat) -> fun (z : Nat) -> n
define pred = fun (n : Nat) -> Ind nat Z fst n
eval pred Z
eval pred (S (S (S Z)))

define add_rec = fun (x : Nat) -> fun (y : Nat) -> (S y)
define add = fun (a : Nat) -> fun (b : Nat) -> Ind nat a add_rec b
eval add (S (S (S Z))) (S (S Z))
eval add (S (S (S Z))) Z